
// syntax-cli -g syntax.bnf -m LALR1 -o parser.h


%lex

%%

\/\*[\s\S]*?\*\/    %empty
\/\/.*              %empty
\s+                 %empty

\+\d+\.\d+          FLOAT_POINT
\-\d+\.\d+          FLOAT_POINT
\d+\.\d+            FLOAT_POINT

0[xX][0-9a-fA-F]+   HEX_INTEGER
\+\d+               DEC_INTEGER
\-\d+               DEC_INTEGER
\d+                 DEC_INTEGER
\'[\s\S]{1,2}\'     CHARACTER

\"[^\"]*\"          STRING_ATOM

[\w\+\-\*\/\~\!\@\#\$\%\^\&\|\<\=\>\:\?]+   SYMBOL_ATOM

/lex


%{

#include "parser/expr.h"

using Value = Expr;

static char _convert_char(const std::string &str)
{
    if (str.size() == 4) {
        if (str == R"('\n')") return '\n';
        if (str == R"('\0')") return '\0';
        if (str == R"('\'')") return '\'';
        if (str == R"('\"')") return '\"';
        if (str == R"('\\')") return '\\';
        if (str == R"('\a')") return '\a';
        if (str == R"('\b')") return '\b';
        if (str == R"('\t')") return '\t';
        assert(0);
    }
    return str.at(1);
}

%}

%%


Expr
    : Atom
    | List
    ;

Atom
    : HEX_INTEGER   {$$ = Expr((int64_t)std::stoll($1, 0, 16))}
    | DEC_INTEGER   {$$ = Expr((int64_t)std::stoll($1, 0, 10))}
    | CHARACTER     {$$ = Expr((int64_t)_convert_char($1))}
    | FLOAT_POINT   {$$ = Expr((double)std::stod($1))}
    | STRING_ATOM   {$$ = Expr($1)}
    | SYMBOL_ATOM   {$$ = Expr($1)}
    ;

List
    : '(' ListEntries ')' {$$ = $2}
    | '[' ListEntries ']' {$$ = $2}
    | '{' ListEntries '}' {$$ = $2}
    ;

ListEntries
    : %empty {$$ = Expr(std::vector<Expr>{})}
    | ListEntries Expr {$1.list.push_back($2); $$ = $1}
    ;


